(add-to-list 'load-path "~/.emacs.d/site-lisp")


;;load yasnippet
(add-to-list 'load-path "~/.emacs.d/site-lisp/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)


;;ctrl + scroll , implement zoom in/out
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)


;;find-file-suggest
(require 'find-file-suggest)
(global-set-key [(control x) (meta f)] 'find-file-suggest)
(global-set-key [(control x) (meta g)] 'ffs-grep)

(ffs-create-file-index "scite" "f:/code/scite310/scite//" "\\.cxx$\\|\\.h$" "\\.git$\\|node_modules\\|assets")


;; set the smooth-scroll
(add-to-list 'load-path "~/.emacs.d/site-lisp/smooth-scroll/")
(require 'smooth-scroll)
;; (smooth-scroll-mode t)

(global-set-key [(control  down)]  'scroll-up-1)
(global-set-key [(control  up)]    'scroll-down-1)
;; (global-set-key [(control  left)]  'scroll-right-1)
;; (global-set-key [(control  right)] 'scroll-left-1)
(global-set-key (kbd "M-n") 'scroll-up-1)
(global-set-key (kbd "M-p") 'scroll-down-1)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)

;; comment/uncomment
(defun qiang-comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
If no region is selected and current line is not blank and we are not at the end of the line,
then comment current line.
Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))
(global-set-key "\M-;" 'qiang-comment-dwim-line)


;; Smart copy, if no region active, it simply copy the current whole line
(defadvice kill-line (before check-position activate)
  (if (member major-mode
              '(emacs-lisp-mode scheme-mode lisp-mode
                                c-mode c++-mode objc-mode js-mode
                                latex-mode plain-tex-mode))
      (if (and (eolp) (not (bolp)))
          (progn (forward-char 1)
                 (just-one-space 0)
                 (backward-char 1)))))
 
(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy a single line instead."
  (interactive (if mark-active (list (region-beginning) (region-end))
                 (message "Copied line")
                 (list (line-beginning-position)
                       (line-beginning-position 2)))))
 
(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
 
;; Copy line from point to the end, exclude the line break
(defun qiang-copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-ring-save (point)
                  (line-end-position))
                  ;; (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))
 
(global-set-key (kbd "M-k") 'qiang-copy-line)


;;[new] background color solution
(require 'color-theme)
;;(color-theme-initialize)
(load-file "~/.emacs.d/site-lisp/color-theme-blackboard.el")
(color-theme-blackboard)


;;[old] original  background color solution 
;; (set-background-color "black") ;; 使用黑色背景
;; (set-foreground-color "grey85") ;; 使用白色前景
;; (set-face-foreground 'region "green")  ;; 区域前景颜色设为绿色
;; (set-face-background 'region "blue") ;; 区域背景色设为蓝色

;;show line number
(load-file "~/.emacs.d/site-lisp/linum.el")
(require 'linum)
(global-linum-mode 1)

;;;; 各窗口间切换

(global-set-key [M-left] 'windmove-left)

(global-set-key [M-right] 'windmove-right)

(global-set-key [M-up] 'windmove-up)

(global-set-key [M-down] 'windmove-down)

;;rebind back/forward paragraph
(global-set-key (kbd "M-[") 'backward-paragraph)

(global-set-key (kbd "M-]") 'forward-paragraph)


;; 实现全屏效果，快捷键为f11
(global-set-key [f11] 'my-maximized)
(global-set-key [f12] 'my-fullscreen)
(defun my-fullscreen ()
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32
   '(2 "_NET_WM_STATE_FULLSCREEN" 0))
  )
;; 最大化
(defun my-maximized ()
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32
   '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32
   '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
  )



